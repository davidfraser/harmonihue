#!/usr/bin/env python

import colorsys
import math
try:
    import grapefruit
except ImportError, e:
    grapefruit = None

def circle_element(f, e, n):
    """gives the nth element of the circle of exponent e based on frequency f (dividing by 2 as necessary to remain within the octave above f)"""
    g = f * (e ** n)
    while g >= f*2:
        g /= 2
    return g

def circle(f, e):
    """returns the ordered set of indexes and tones generated by the circle of exponent e based on frequency f"""
    c = set()
    g = f
    n = 0
    finished = False
    while not finished:
       c.add((n, g))
       n += 1
       g = circle_element(f, e, n)
       gr = (g if g <= f * 1.5 else g/2)
       r = max(gr/f, f/gr)
       finished = (r <= 1.025)
    return sorted(c)

def ratio(f, g):
    while f/1.5 > g:
        g *= 2
    while f*1.5 < g:
        g /= 2
    return (g/f)

def abs_ratio(f, g):
    r = ratio(f, g)
    return max(r, 1/r)

def closest_harmonic(f, g, e):
    """returns the index and frequency of the closest harmonic to g based on f with exponent e"""
    c = circle(f, e)
    n = None
    gr = g/f
    while gr < 1:
       gr *= 2
    while gr > 2:
       gr /= 2
    r, n = min((abs_ratio(g, cn), n) for n, cn in c)
    return n, c[n][1]

harmonic_index = {
        3: 1,
        5: 1.5,
        7: 2,
        9: 2.5,
   }

def closest_harmonics(f, g):
    """returns the set of harmonic ratios that could relate g to the base frequency f within a ratio of 1.025"""
    # for e in (3, 5, 7, 9, 2 ** (1/12.)):
    print f, g
    for e, m in sorted(harmonic_index.items()):
        n, fen = closest_harmonic(f, g, e)
        r = abs_ratio(fen, g)
        score = (n + (r-1))*m
        print "   %0.2f %d:%d %0.2f" % (score, e, n, r)

def harm_skew_pythag(f):
    harmonic_index, h_f = closest_harmonic(440., f, 3)
    skew = abs_ratio(f, h_f)
    return harmonic_index, skew

hsv_map = {0: (0.75, 0.75), 1: (0.75, 0.25), 2: (0.25, 0.25), 3: (0.25, 0.75)}

def color(harmonic_index, skew, cycle):
    r, g, b = colorsys.hsv_to_rgb(float((23-harmonic_index % 12)/12.), 1.0, 0.8)
    return r, g, b
    if not grapefruit:
        s, v = hsv_map[cycle]
        r, g, b = colorsys.hsv_to_rgb(float(harmonic_index)/12, s, v)
        h, s, v = colorsys.rgb_to_hsv(r, g, b)
        return r, g, b
    else:
        x, y = hsv_map[cycle]
        L, a, b = float(30+4*harmonic_index), x/2, y/2
        c = grapefruit.Color.NewFromLab(L, a, b)
        print (L, a, b), c.lab, c.rgb
        return c.rgb

def web_color(rgb):
    r, g, b = [int(i*256) for i in rgb]
    return "#%02x%02x%02x" % (r, g, b)

def color_diff(a, b):
    """calculates the difference in lab space between two colors in rgb space"""
    if grapefruit:
        ca, cb = grapefruit.Color.NewFromRgb(*a), grapefruit.Color.NewFromRgb(*b)
        la, lb = ca.lab, cb.lab
        return math.sqrt(sum((la[i]-lb[i])*(la[i]-lb[i]) for i in (0,1,2)))
    else:
        # just use hsv
        hi, si, vi = colorsys.rgb_to_hsv(*a)
        hj, sj, vj = colorsys.rgb_to_hsv(*b)
        h_diff = abs(hi-hj)
        h_diff = min(h_diff, 1-h_diff)
        return math.sqrt(h_diff * h_diff + (si-sj)*(si-sj) + (vi-vj)*(vi-vj))

def color_map():
    """Writes out html with a colour map for the tones in the scale"""
    e = 2 ** (1/12.)
    tone_names = ["A", "Bb", "B", "C", "C#", "D", "Eb", "E", "F", "F#", "G", "Ab"]
    tone_f = [f for i, f in circle(440., e)]
    # Pythagorean:
    # tone_index = [closest_harmonic(440., f, 3)[0] for f in tone_f]
    pythag_index = [0, 7, 2, 9, 4, 11, 6, 1, 8, 3, 10, 5]
    pythag_cycle = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
    # ideal
    ideal_index = [0, 7, 4, 9, 2, 11, 6, 1, 10, 3, 8, 5]
    method = "pythag"
    def harm_skew_ideal(i):
        harmonic_index = tone_index[i]
        return harmonic_index, 0
    if method == "pythag":
        tone_index = pythag_index
        tone_harm_skew = [(harm_skew_pythag(f)[0], 0) for f in tone_f]
    elif method == "ideal":
        tone_index = ideal_index
        tone_harm_skew = [harm_skew_ideal(i) for i in range(12)]
    else:
        raise ValueError("Unknown method %s" % method)
    tone_colors = [color(harm, skew, pythag_cycle[harm]) for harm, skew in tone_harm_skew]
    yield "<h1>Index Map</h1>"
    yield "<table class='wide'><tr><th>Note</th><th>Freq</th><th>Index</th><th>Color</th><th>RGB</th><th>HSV</th></tr>"
    def color_cell(tone_color):
        tone_web_color = web_color(tone_color)
        return "<td style='background-color: %s;'>&nbsp;</td>" % tone_web_color
    for p, (i, f) in sorted(zip(pythag_index, enumerate(tone_f))):
        tone_color = tone_colors[i]
        rgb_str = "%0.2f %0.2f %0.2f" % (tone_color)
        rgb_str = "%3d %3d %3d" % tuple([int(255*x) for x in tone_color])
        tone_hsv = colorsys.rgb_to_hsv(*tone_color)
        hsv_str = "%0.2f %0.2f %0.2f" % (tone_hsv)
        yield "<tr><td><b>%s</b></td><td><tt>%0.2f</tt></td><td><tt>%d</tt></td>%s<td><tt>%s</tt></td><td><tt>%s</tt></td></tr>" % \
                (tone_names[i], f, tone_index[i], color_cell(tone_color), rgb_str, hsv_str)
    yield "</table>"
    yield "<h1>Note Map</h1>"
    yield "<table class='wide'><tr><th>Note</th><th>Freq</th><th>Index</th><th>Color</th><th>RGB</th><th>HSV</th></tr>"
    for i, f in enumerate(tone_f):
        tone_color = tone_colors[i]
        tone_web_color = web_color(tone_color)
        rgb_str = "%0.2f %0.2f %0.2f" % (tone_color)
        tone_hsv = colorsys.rgb_to_hsv(*tone_color)
        hsv_str = "%0.2f %0.2f %0.2f" % (tone_hsv)
        yield "<tr><td><b>%s</b></td><td><tt>%0.2f</tt></td><td><tt>%d</tt></td><td style='background-color: %s';>&nbsp;</td><td><tt>%s</tt></td><td><tt>%s</tt></td></tr>" % \
                (tone_names[i], f, tone_index[i], tone_web_color, rgb_str, hsv_str)
    yield "</table>"
    yield "<h1>Major Chords</h1>"
    yield "<table><tr><th>Notes</th><th>Tonic</th><th>3rd</th><th>5th</th></tr>"
    for i in range(12):
        notes_i = [i, (i+4) % 12, (i+7) % 12]
        notes = [tone_names[i] for i in notes_i]
        colors = [tone_colors[i] for i in notes_i]
        yield "<tr><td><b>%s</b></td>" % (" ".join(notes))
        for tc in colors:
            yield "<td style='background-color:%s;'>" % web_color(tc)
        yield "</tr>"
    yield "</table>"
    yield "<h1>Note Differences</h1>"
    yield "<table class='wide'><tr><th></th>"
    for semitone in range(12):
        yield "<th>%02d</th>" % semitone
    yield "</tr>"
    for i in range(12):
        yield "<tr><th>%s</th>" % tone_names[i]
        for semitone in range(12):
            j = (i + semitone) % 12
            d = color_diff(tone_colors[i], tone_colors[j])
            yield "<td><tt>%0.2f&nbsp;<b style='background-color: %s; color: white;'>%2s</b>-<b style='background-color: %s; color: white;'>%2s</b></tt></td>" % \
                    (d, web_color(tone_colors[i]), tone_names[i], web_color(tone_colors[j]), tone_names[j])
        yield "</tr>"
    yield "</table>"
    yield "<h1>Interval Ordering</h1>"
    yield "<table class='wide'><tr><th></th>"
    for semitone in range(12):
        yield "<th>%02d</th>" % semitone
    yield "</tr>"
    for i in range(12):
        yield "<tr><th>%s</th>" % tone_names[i]
        diff_list = []
        for semitone in range(12):
            j = (i + semitone) % 12
            d = color_diff(tone_colors[i], tone_colors[j])
            ij = (i+12-j) % 12
            s, ij = ("+", 12-ij) if ij > 6 else ("-", ij)
            diff_list.append((d, s, ij))
        diff_list.sort()
        for d, s, ij in diff_list:
            yield "<td><tt>d%s%02d</tt></td>" % (s, ij)
        yield "</tr>"
    yield "</table>"

def main():
    style = "<style format='text/css'>td {width: 20%} table.wide {width: 100%} table.wide td {width: 8%}</style>"
    open("hue.html", "w").write("<html><head><title>Harmonic Hues</title>" + style + "</head><body>" + "\n".join(color_map()) + "</body></html>")

if __name__ == "__main__":
    main()

